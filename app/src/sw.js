import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

// Skip waiting and claim clients immediately
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

self.addEventListener('activate', (event) => {
  event.waitUntil(
    Promise.all([
      // Clean up old caches
      caches.keys().then(cacheNames => {
        return Promise.all(
          cacheNames.map(cacheName => {
            // Delete old workbox caches
            if (cacheName.startsWith('workbox-precache') && !cacheName.includes(self.__WB_REVISION)) {
              return caches.delete(cacheName);
            }
          })
        );
      }),
      // Claim all clients immediately
      clients.claim()
    ])
  );
});

// Precache all assets generated by the build process
precacheAndRoute(self.__WB_MANIFEST);

// Cache video files
registerRoute(
  ({ request }) => request.url.endsWith('.mp4'),
  new CacheFirst({
    cacheName: 'video-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Cache drill images
registerRoute(
  ({ request, url }) => request.destination === 'image' && url.pathname.includes('/drill/'),
  new CacheFirst({
    cacheName: 'drill-images-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 200, // Cache up to 200 drill images
        maxAgeSeconds: 60 * 24 * 60 * 60, // 60 days
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Cache music images
registerRoute(
  ({ request, url }) => request.destination === 'image' && url.pathname.includes('/music/'),
  new CacheFirst({
    cacheName: 'music-images-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 300, // Cache up to 300 music images
        maxAgeSeconds: 60 * 24 * 60 * 60, // 60 days
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Cache audio files (MP3s for movements)
registerRoute(
  ({ request, url }) => request.url.endsWith('.mp3') || request.url.endsWith('.m4a'),
  new CacheFirst({
    cacheName: 'audio-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 10, // Cache up to 10 audio files
        maxAgeSeconds: 90 * 24 * 60 * 60, // 90 days
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200, 206], // Include 206 for partial content (range requests)
      }),
    ],
  })
);

// Cache Google Fonts
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com',
  new CacheFirst({
    cacheName: 'google-fonts-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 365 * 24 * 60 * 60, // 365 days
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Handle push events
self.addEventListener('push', event => {
  if (!event.data) return;

  const data = event.data.json();
  const options = {
    body: data.body,
    icon: '/logo.png',
    badge: '/logo.png',
    vibrate: [200, 100, 200],
    data: data.data || {},
    requireInteraction: false,
    actions: data.actions || []
  };

  event.waitUntil(
    self.registration.showNotification(data.title, options)
  );
});

// Handle notification clicks
self.addEventListener('notificationclick', event => {
  event.notification.close();

  // Handle action clicks
  if (event.action === 'open') {
    // Open quiz mode for update notification
    event.waitUntil(
      clients.matchAll({ type: 'window' }).then(clientList => {
        // If app is already open, navigate to movements page
        for (const client of clientList) {
          if (client.url.includes('localhost') || client.url.includes('drillio')) {
            client.focus();
            return client.navigate('/movements');
          }
        }
        // Otherwise, open new window to movements page
        return clients.openWindow('/movements');
      })
    );
    return;
  } else if (event.action === 'dismiss') {
    // Just close the notification
    return;
  }

  // Default: Open the app when notification body is clicked
  event.waitUntil(
    clients.matchAll({ type: 'window' }).then(clientList => {
      // If app is already open, focus it
      for (const client of clientList) {
        if (client.url.includes('localhost') || client.url.includes('drillio')) {
          return client.focus();
        }
      }
      // Otherwise, open new window
      return clients.openWindow('/');
    })
  );
});

// Background sync for scheduled notifications
self.addEventListener('periodicsync', event => {
  if (event.tag === 'drill-reminder') {
    event.waitUntil(checkAndSendDrillReminder());
  }
});

async function checkAndSendDrillReminder() {
  const now = new Date();
  const endDate = new Date('2025-09-15');
  
  // Stop if past September 15, 2025
  if (now > endDate) return;
  
  // Check if it's time for a reminder (every 3 days at 4 PM EST)
  const lastReminderKey = 'lastDrillReminder';
  const lastReminder = await getFromIndexedDB(lastReminderKey);
  
  if (shouldSendReminder(lastReminder)) {
    const options = {
      body: 'Time to review your drill and practice with the quiz mode! ðŸŽµ',
      icon: '/logo.png',
      badge: '/logo.png',
      vibrate: [200, 100, 200],
      requireInteraction: false,
      actions: [
        { action: 'open', title: 'Open Drillio' },
        { action: 'dismiss', title: 'Dismiss' }
      ]
    };
    
    await self.registration.showNotification('Drill Review Reminder', options);
    await saveToIndexedDB(lastReminderKey, Date.now());
  }
}

function shouldSendReminder(lastReminder) {
  if (!lastReminder) return true;
  
  const now = new Date();
  const lastDate = new Date(lastReminder);
  const daysSince = (now - lastDate) / (1000 * 60 * 60 * 24);
  
  // Check if it's been at least 3 days and it's around 4 PM EST
  if (daysSince >= 3) {
    const hour = now.getHours();
    const estOffset = now.getTimezoneOffset() + 240; // EST is UTC-5 (240 minutes)
    const estHour = (hour + Math.floor(estOffset / 60)) % 24;
    
    return estHour >= 15 && estHour <= 17; // Between 3 PM and 5 PM EST
  }
  
  return false;
}

// Simple IndexedDB helpers for storing notification state
async function getFromIndexedDB(key) {
  return new Promise((resolve) => {
    const request = indexedDB.open('drillioNotifications', 1);
    
    request.onerror = () => resolve(null);
    
    request.onsuccess = (event) => {
      const db = event.target.result;
      const transaction = db.transaction(['notifications'], 'readonly');
      const store = transaction.objectStore('notifications');
      const getRequest = store.get(key);
      
      getRequest.onsuccess = () => resolve(getRequest.result?.value);
      getRequest.onerror = () => resolve(null);
    };
    
    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      if (!db.objectStoreNames.contains('notifications')) {
        db.createObjectStore('notifications', { keyPath: 'key' });
      }
    };
  });
}

async function saveToIndexedDB(key, value) {
  return new Promise((resolve) => {
    const request = indexedDB.open('drillioNotifications', 1);
    
    request.onerror = () => resolve(false);
    
    request.onsuccess = (event) => {
      const db = event.target.result;
      const transaction = db.transaction(['notifications'], 'readwrite');
      const store = transaction.objectStore('notifications');
      store.put({ key, value });
      
      transaction.oncomplete = () => resolve(true);
      transaction.onerror = () => resolve(false);
    };
    
    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      if (!db.objectStoreNames.contains('notifications')) {
        db.createObjectStore('notifications', { keyPath: 'key' });
      }
    };
  });
}